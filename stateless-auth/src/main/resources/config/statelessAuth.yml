# This handler is generic request handler for the OAuth 2.0 provider authorization code redirect.
# It receives the auth code and goes to the OAuth 2.0 provider to get the subject token. The jwt
# token is then sent to the browser with two cookies with splitting header/payload and signature.
# Another options is to keep the jwt in session and return sessionId to the browser. In either
# case, the csrf token will be send with a separate cookie.
---
# Indicate if the StatelessAuthHandler is enabled or not
enabled: ${statelessAuth.enabled:true}
# Once Authorization is done, which path the UI is redirected.
redirectUri: ${statelessAuth.redirectUri:https://localhost:3000/#/app/dashboard}
# An optional redirect uri if the user deny or cancel the authorization on the Consent page. Default to redirectUri if missing.
denyUri: ${statelessAuth.denyUri:https://localhost:3000/#/app/dashboard}
# Request path for the authorization code handling.
authPath: ${statelessAuth.authPath:/authorization}
# Request path for the logout handling to remove HttpOnly access-token and other cookies
logoutPath: ${statelessAuth.logoutPath:/logout}
# Cookie domain which is the original site
cookieDomain: ${statelessAuth.cookieDomain:localhost}
# Cookie path
cookiePath: ${statelessAuth.cookiePath:/}
# Login uri, redirect to it once session is expired
cookieTimeoutUri: ${statelessAuth.cookieTimeoutUri:/}
# Cookie secured
cookieSecure: ${statelessAuth.cookieSecure:true}
# Session timeout in seconds. This is the time after which the session will expire.
# Default is 3600 seconds (1 hour).
sessionTimeout: ${statelessAuth.sessionTimeout:3600}
# Remember me timeout in seconds. This is the time after which the session will expire
# if rememberMe is set true during login. Default is 604800 seconds (7 days).
rememberMeTimeout: ${statelessAuth.rememberMeTimeout:604800}

# Bootstrap token used by oauth-kafka to call light-portal services. This is a client credentials token without user info. And it is created with a special tool only available to customers.
bootstrapToken: ${statelessAuth.bootstrapToken:token}

# Google Auth Path
googlePath: ${statelessAuth.googlePath:/google}
# Google Client Id
googleClientId: ${statelessAuth.googleClientId:google_client_id}
# Google Client Secret that is retrieved from the environment variable
googleClientSecret: ${statelessAuth.googleClientSecret:secret}
# Google Redirect URI
googleRedirectUri: ${statelessAuth.googleRedirectUri:https://localhost:3000}

# Facebook Auth Path
facebookPath: ${statelessAuth.facebookPath:/facebook}
# Facebook Client Id
facebookClientId: ${statelessAuth.facebookClientId:facebook_client_id}
# Facebook Client Secret that is retrieved from the environment variable
facebookClientSecret: ${statelessAuth.facebookClientSecret:secret}

# GitHub Auth Path
githubPath: ${statelessAuth.githubPath:/github}
# GitHub Client Id
githubClientId: ${statelessAuth.githubClientId:github_client_id}
# GitHub Client Secret that is retrieved from the environment variable
githubClientSecret: ${statelessAuth.githubClientSecret:secret}
